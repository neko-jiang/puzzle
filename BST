A binary search tree(BST) is a tree in which all the nodes follow the below mentioned properties:
1. the left sub tree of a node has a key less than or equal to its parent node's key
2. the right sub tree of a node has a key greater than to its parent node's key

left_subtree (keys)  ≤  node (key)  ≤  right_subtree (keys)

Basic operation:
Search: Whenever an element is to be searched, start searching from the root node. Then if the data is less than the key value, search for the element in the left subtree. Otherwise, search for the element in the right subtree. Follow the same algorithm for each node.

Insert operation:
Start searching from the root node, then if the data is less than the key value, search for the empty location in the left subtree and insert the data. Otherwise, search for the empty location in the right subtree and insert the data.

Inorder,preorder, postorder traversal

Are duplicate keys allowed in the definition of BST?
Most (that I've seen) specify left children as <= and right children as >. Practically speaking, a BST which allows either of the right or left children to be equal to the root node, will require extra computational steps to finish a search where duplicate nodes are allowed.
